<?php

if (!defined('BASEPATH'))
    exit('No direct script access allowed');

class Funds extends CI_Controller {

    var $user_id;
    var $name;
    var $active;
    var $user;
    var $data;

    function __construct() {
        parent::__construct();
        $this->load->library('ion_auth');
        $this->load->library('session');
        $this->load->library('document');
        $this->load->library('form_validation');
        $this->load->database();
        $this->load->helper('form');
        $this->load->helper('url');
        $this->lang->load('funds');
        $this->load->model('user_model', '', TRUE);
        $this->load->model('admin_model', '', TRUE);
        $this->load->model('currencies_model', '', TRUE);
        $this->load->model('balance_model', '', TRUE);
        $this->load->model('transfer_model', '', TRUE);
        $this->load->library('user_login');
        $module_name = $this->router->fetch_class();
        $action_name = $this->router->fetch_method();

        if (!$this->user_login->hasPermission($module_name, $action_name)) {
            $this->session->set_flashdata('permission', 'You do not have permission to access this page, please refer to your system administrator.');
            redirect('home');
        }

        if ((!$this->session->userdata('admin_logged')) || (!$this->ion_auth->logged_in())) {
            redirect('login/index/', 'refresh');
        }
        $this->load->helper('currency');
    }

    public function index() {

        $this->document->setTitle($this->lang->line('headding_title'));
        $this->data['title'] = $this->document->getTitle();

        $this->data['headding_title'] = $this->lang->line('headding_title');
        $this->data['text_number'] = $this->lang->line('text_number');
        $this->data['text_name'] = $this->lang->line('text_name');
        $this->data['text_first'] = $this->lang->line('text_first');
        $this->data['text_last'] = $this->lang->line('text_last');
        $this->data['text_currency'] = $this->lang->line('text_currency');
        $this->data['text_amount'] = $this->lang->line('text_amount');
        $this->data['text_memo'] = $this->lang->line('text_memo');
        $this->data['text_select'] = $this->lang->line('text_select');
        $this->data['button_confirm'] = $this->lang->line('button_confirm');
        $this->data['button_submit'] = $this->lang->line('button_submit');
        $this->data['button_cancel'] = $this->lang->line('button_cancel');

        $this->data['action'] = site_url('funds/index');

        $this->data['cancel'] = site_url('funds/index');

        $this->load->model('currencies_model', '', TRUE);

        $currencies = $this->currencies_model->getCurrencies(1);

        $this->data['currencies'] = array();
        foreach ($currencies as $currencie) {

            $this->data['currencies'][] = array(
                'currencies_id' => $currencie->currencies_id,
                'title' => $currencie->title,
            );
        }
        $this->form_validation->set_rules('account_number', 'lang:text_number', 'required|trim|xss_clean|numeric|exact_length[8]|callback_check_account');
        $this->form_validation->set_rules('amount', 'lang:text_amount', 'required|trim|min_length[1]|max_length[8]|xss_clean|numeric');
        $this->form_validation->set_rules('currency_id', 'lang:text_currency', 'callback_currency_validate');
        $this->form_validation->set_rules('transaction_memo', 'lang:text_memo', 'trim|xss_clean|max_length[255]');

        if ($this->form_validation->run() == FALSE) {
            $this->data['main_content'] = 'funds/add.php';
            $this->load->view('main_board', $this->data);
        } else {
            $this->data['account_number'] = $this->input->post('account_number');

            $currencys_id = $this->input->post('currency_id');

            $currencys = $this->currencies_model->getCurrencie($currencys_id);

            $this->data['code'] = $currencys->code;

            $user_to = $this->user_model->getAccountNumber($this->data['account_number']);

            $this->data['account_number'] = $user_to->account_number;
            $this->data['username'] = $user_to->username;
            $this->data['first_name'] = $user_to->first_name;
            $this->data['last_name'] = $user_to->last_name;
            $this->data['amount'] = (float) ($this->input->post('amount'));
            $this->data['memo'] = $this->input->post('transaction_memo');

            $this->data['action'] = site_url('funds/confirm');

            $this->data['main_content'] = 'funds/confirm.php';
            $this->data['token'] = random_string('numeric', 16);
            $this->load->view('main_board', $this->data);
        }
    }

    function confirm() {
        $token = $this->input->post('token');
        if (strlen($token) == 16) {

            $this->data['account_number'] = $this->input->post('account_number');
            $this->data['first_name'] = $this->input->post('first_name');
            $this->data['last_name'] = $this->input->post('last_name');
            $this->data['memo'] = $this->input->post('memo');


            $user_to = $this->user_model->getAccountNumber($this->data['account_number']);

            $this->data['username'] = $user_to->username;

            $amount = (float) ($this->input->post('amount'));

            $this->data['amount'] = $amount;

            $date_update = date('Y-m-d H:i:s', time());

            $code = $this->input->post('code');

            $this->data['code'] = $code;

            $currencys = $this->currencies_model->getByCode($code);

            $decimal_places = $currencys->decimal_places;
            $decimal_point = $currencys->decimal_point;
            $thousands_point = $currencys->thousands_point;
            $symbol_left = $currencys->symbol_left;
            $symbol_right = $currencys->symbol_right;

            $check_user = $this->balance_model->getUserID($user_to->id);

            $date_transfer = date("Y-m-d H:i:s");

            $id_admin = $this->session->userdata('admin_id');

            $admin_transfer = $this->admin_model->getAdmin($id_admin);

            if ($user_to) {
                do {
                    $batch = random_string('numeric', 14);
                    $good = $this->transfer_model->check_bath($batch);
                } while ($good);

                $data['batch_number'] = $batch;
                $data['from_userid'] = -1;
                $data['to_userid'] = $user_to->id;
                $data['amount'] = $amount;
                $data['transaction_time'] = $date_transfer;
                $data['transaction_memo'] = $this->data['memo'];
                $data['from_account'] = $admin_transfer->username;
                $data['to_account'] = $this->data['account_number'];
                $data['transaction_status'] = 'active';
                $data['transaction_currency'] = $this->data['code'];
                $data['amount_text'] = format_currency($amount, $decimal_places, $decimal_point, $thousands_point, $symbol_left, $symbol_right);
                $data['fee'] = 0;

                $transfer = $this->transfer_model->save($data);
                if ($transfer > 0) {
                    $balance = $this->balance_model->getBalaceById($user_to->id, $this->data['code']);

                    if ($balance) {
                        $ok2 = $this->balance_model->update($user_to->id, $this->data['code'], array('balance' => $balance + $amount, 'last_updated' => $date_transfer));

                        if ($ok2)
                            $this->transfer_model->update($transfer, array('transaction_status' => 'completed'));
                    } else {
                        $id2 = $this->balance_model->save(array(
                            'user_id' => $user_to->id,
                            'currency_code' => $this->data['code'],
                            'balance' => $amount,
                            'last_updated' => $date_transfer)
                        );

                        if ($id2 > 0)
                            $this->transfer_model->update($transfer, array('transaction_status' => 'completed'));
                    }
                }
            }

            $this->session->set_flashdata('token', random_string('numeric', 16));
            $this->session->set_flashdata('account_number', $this->data['account_number']);
            $this->session->set_flashdata('username', $this->data['username']);
            $this->session->set_flashdata('amount', $symbol_left . $amount . $symbol_right);
            $this->session->set_flashdata('memo', $this->data['memo']);
            redirect('funds/succeed/', 'refresh');
        }else {
            redirect('funds/index/', 'refresh');
        }
    }

    function succeed() {

        $this->document->setTitle($this->lang->line('headding_title'));
        $this->data['title'] = $this->document->getTitle();

        $this->data['text_number'] = $this->lang->line('text_number');
        $this->data['text_name'] = $this->lang->line('text_name');
        $this->data['text_first'] = $this->lang->line('text_first');
        $this->data['text_last'] = $this->lang->line('text_last');
        $this->data['text_currency'] = $this->lang->line('text_currency');
        $this->data['text_amount'] = $this->lang->line('text_amount');
        $this->data['text_memo'] = $this->lang->line('text_memo');
        $this->data['text_batch'] = $this->lang->line('text_batch');
        $this->data['text_notice'] = $this->lang->line('text_notice');

        $this->data['text_new_transfer'] = $this->lang->line('text_new_transfer');
        $this->data['action'] = $this->lang->line('text_new_transfer');

        $this->data['action'] = site_url('funds/index');

        $token = $this->session->flashdata('token');

        if (strlen($token) == 16 && $this->session->flashdata('account_number')) {
            $this->data['account_number'] = $this->session->flashdata('account_number');
            $this->data['username'] = $this->session->flashdata('username');
            $this->data['amount'] = $this->session->flashdata('amount');
            $this->data['memo'] = $this->session->flashdata('memo');
            $this->data['main_content'] = 'funds/succeed.php';
            $this->load->view('main_board', $this->data);
        }
        else
            redirect('funds/index/', 'refresh');
    }

    function check_account($an) {
        if (!$this->user_model->check_acc_num($an)) {
            $this->form_validation->set_message('check_account', "The user profile not found. Please try again.");
            return FALSE;
        } else {
            return TRUE;
        }
    }

    function currency_validate($selectValue) {
        // 'none' is the first option and the text says something like "-Choose one-"
        if ($selectValue == 'none') {
            $this->form_validation->set_message('currency_validate', 'Please select the currency of balance that you want to add funds to.');
            return false;
        } else { // user picked something
            return true;
        }
    }

}