<?php

class User_model extends CI_Model {

    private $tbl = 'users';
    private $tbl_publish = 'users_publish';
    private $id = 'id';
    private $user_id = 'user_id';

    function __construct() {
        parent::__construct();
    }

    function check_key($id, $key) { //check master key
        $data = $this->db->get_where($this->tbl, array('id' => $id, "master_key" => $key))->result();
        if ($data) {
            return true;
        } else {
            return false;
        }
    }

    // check first_name and check security_question
    function check_more($email, $fiel, $value) {
        $data = $this->db->get_where($this->tbl, array('email' => $email, "{$fiel}" => $value))->result();

        if ($data) {
            return true;
        } else {
            return false;
        }
    }

    function check_acc_num($acc_number) {
        $r = $this->db->get_where($this->tbl, array('account_number' => $acc_number))->result();

        if ($r) {
            return true;
        } else {
            return false;
        }
    }

    function check_email($email) {
        $data = $this->db->get_where($this->tbl, array('email' => $email))->result();

        if ($data) {
            return true;
        } else {
            return false;
        }
    }

    function check_email_acc($email, $acc_number) {
        $data = $this->db->get_where($this->tbl, array('email' => $email, 'account_number' => $acc_number))->result();
        if ($data) {
            return true;
        } else {
            return false;
        }
    }

    function check_reset($email, $code) {
        $results = $this->db->get_where($this->tbl, array('email' => $email, 'forgotten_password_code' => $code))->result();

        if ($results) {
            return true;
        } else {
            return false;
        }
    }

    function getEmmail($email) {
        $results = $this->db->get_where($this->tbl, array('email' => $email))->result();
        if ($results) {
            return $results[0];
        }
        else
            return false;
    }

    function getUser($id) {
        $r = $this->db->get_where($this->tbl, array($this->id => $id))->result();
        if ($r) {
            return $r[0];
        }
        else
            return false;
    }

    function getAccountNumber($id) {
        $r = $this->db->get_where($this->tbl, array('account_number' => $id))->result();
        if ($r) {
            return $r[0];
        }
        else
            return false;
    }

    function save($data) {
        $this->db->insert($this->tbl, $data);

        return $this->db->insert_id();
    }

    function update($id, $data) {
        $this->db->where($this->id, $id);

        $this->db->update($this->tbl, $data);
    }

    function getUserPublished($id) {
        $r = $this->db->get_where($this->tbl_publish, array($this->user_id => $id))->result();
        if ($r) {
            return $r[0];
        }
        else
            return false;
    }

    function check_user_publish($id) {
        $data = $this->db->get_where($this->tbl_publish, array('user_id' => $id))->result();
        if ($data) {
            return true;
        } else {
            return false;
        }
    }

    function save_publish($id, $data) {
        $data['user_id'] = $id;
        $this->db->insert($this->tbl_publish, $data);

        return $this->db->insert_id();
    }

    function update_publish($id, $data) {
        $this->db->where($this->user_id, $id);

        $this->db->update($this->tbl_publish, $data);
    }

    function getUserSettings($id) {
        $r = $this->db->get_where('sercurity_setting', array('user_id' => $id))->result();
        if ($r) {
            return $r[0];
        }
        else
            return false;
    }

    function check_setting_publish($id) {
        $data = $this->db->get_where('sercurity_setting', array('user_id' => $id))->result();
        if ($data) {
            return true;
        } else {
            return false;
        }
    }

    function save_publish_setting($id, $data) {
        $data['user_id'] = $id;
        $this->db->insert('sercurity_setting', $data);

        return $this->db->insert_id();
    }

    function update_publish_setting($id, $data) {
        $this->db->where($this->user_id, $id);

        $this->db->update('sercurity_setting', $data);
    }

    public function getHistorys($data) {
        $sql = "SELECT * FROM security_log WHERE account_number=" . (int) $data['account_number'] . " AND date_creater >= DATE_SUB(SYSDATE(), INTERVAL 30 DAY)";

        $sql.=" ORDER BY date_creater DESC";

        if (isset($data['start']) || isset($data['limit'])) {
            if ($data['start'] < 0) {
                $data['start'] = 0;
            }

            if ($data['limit'] < 1) {
                $data['limit'] = 20;
            }

            $sql .= " LIMIT " . (int) $data['start'] . "," . (int) $data['limit'];
        }
        $data = $this->db->query($sql)->result();

        return $data;
    }

    public function totalHistorys($data) {
        $this->db->where('account_number', $data['account_number']);
        $this->db->from('security_log');
        $count = $this->db->count_all_results();
        return $count;
    }

    public function getEmailTemplates($code, $language_id) {
        $sql = "SELECT e.email_key,ed.* FROM emails e  LEFT JOIN emails_description ed ON e.email_id=ed.email_id WHERE e.email_key='" . $code . "' AND ed.language_id=" . (int) $language_id . "";

        $data = $this->db->query($sql)->result();

        return $data[0];
    }

}

